<?php

class CliproController extends Controller
{
	/**
	 * @var string the default layout for the views. Defaults to '//layouts/column2', meaning
	 * using two-column layout. See 'protected/views/layouts/column2.php'.
	 */
	public $layout='//layouts/column2';

	/**
	 * @return array action filters
	 */
	public function filters()
	{
		return array(
			'accessControl', // perform access control for CRUD operations
			'postOnly + delete', // we only allow deletion via POST request
		);
	}

	/**
	 * Specifies the access control rules.
	 * This method is used by the 'accessControl' filter.
	 * @return array access control rules
	 */
	public function accessRules()
	{
		return array(
			array('allow',  // allow all users to perform 'index' and 'view' actions
				'actions'=>array('index','view'),
				'users'=>array('*'),
			),
			array('allow', // allow authenticated user to perform 'create' and 'update' actions
				'actions'=>array('Excel','creaobjeto','creacontacto','creadireccion','create','update'),
				'users'=>array('@'),
			),
			array('allow', // allow admin user to perform 'admin' and 'delete' actions
				'actions'=>array('admin','delete'),
				'users'=>array('admin'),
			),
			array('deny',  // deny all users
				'users'=>array('*'),
			),
		);
	}

	/**
	 * Displays a particular model.
	 * @param integer $id the ID of the model to be displayed
	 */
	public function actionView($id)
	{
		$this->render('view',array(
			'model'=>$this->loadModel($id),
		));
	}

	/**
	 * Creates a new model.
	 * If creation is successful, the browser will be redirected to the 'view' page.
	 */
	public function actionCreate()
	{
		$model=new Clipro;

		// Uncomment the following line if AJAX validation is needed
		 $this->performAjaxValidation($model);

		if(isset($_POST['Clipro']))
		{
			$model->attributes=$_POST['Clipro'];
			$ruc=$model->rucpro;
			if($model->save()) {
			    //$criteria = new CDbCriteria;  
				//$criteria->condition = "rucpro=':rucpro'";
				//$criteria->params = array(':rucpro' => $ruc); 
			   $model2=$model->find('rucpro=:rukis', array(':rukis'=>$ruc));
				$this->redirect(array('update','id'=>$model2->codpro));
				//return true;
				}
		}

		$this->render('create',array(
			'model'=>$model,
		));
	}

	
	
public function ActionExcel()
	{
	$d = new CActiveDataProvider('Inventario');
	$data=$d->getData();
	// count($data);
	 $this->render('ju',array('data'=>$data));
	 
//Yii::import('application.extensions.phpexcel.JPhpExcel');
//$xls = new JPhpExcel('UTF-8', false, 'My Test Sheet');
//$xls->addArray($data);
//$xls->generateXML('my-test');
	
	 }
	 
	 
	 
	public function actionCreacontacto()
	{
		$model=new Contactos;
		// Uncomment the following line if AJAX validation is needed
		 $this->performAjaxValidation($model);
		if(isset($_POST['Contactos']))
		{
				$model->attributes=$_POST['Contactos'];
				if($model->save()) {
										if (!empty($_GET['asDialog']))
												{
													//Close the dialog, reset the iframe and update the grid
													echo CHtml::script("window.parent.$('#cru-dialog2').dialog('close');window.parent.$('#cru-frame2').attr('src','');window.parent.$.fn.yiiGridView.update('{$_GET['gridId']}');");
														Yii::app()->end();
												}
								}else {
								}
		}
		if (!empty($_GET['asDialog']))
					$this->layout = '//layouts/iframe';
		$this->render('_form_contactos',array('model'=>$model,'codpro'=>$_GET['codpro']));
		
	}
	
	
	
	public function actionCreaobjeto()
	{
		$model=new ObjetosCliente;
		// Uncomment the following line if AJAX validation is needed
		 $this->performAjaxValidation($model);
		if(isset($_POST['ObjetosCliente']))
		{
				$model->attributes=$_POST['ObjetosCliente'];
				if($model->save()) {
										if (!empty($_GET['asDialog']))
												{
													//Close the dialog, reset the iframe and update the grid
													echo CHtml::script("window.parent.$('#cru-dialog5').dialog('close');window.parent.$('#cru-frame5').attr('src','');window.parent.$.fn.yiiGridView.update('{$_GET['gridId']}');");
														Yii::app()->end();
												}
								}else {
								//Yii::app()->end();
								echo CHtml::script("window.parent.$('#cru-dialog5').dialog('close');window.parent.$('#cru-frame5').attr('src','');window.parent.$.fn.yiiGridView.update('{$_GET['gridId']}');");
														Yii::app()->end();
								}
		}
		if (!empty($_GET['asDialog']))
					$this->layout = '//layouts/iframe';
		$this->render('_form_objetos',array('model'=>$model,'codpro'=>$_GET['codpro']));
		
	}
	
	
	
	
	
	
	public function actionCreadireccion()
	{
		$model=new Direcciones;

		// Uncomment the following line if AJAX validation is needed
		 $this->performAjaxValidation($model);
			

		if(isset($_POST['Direcciones']))
		{
				$model->attributes=$_POST['Direcciones'];
				if($model->save()) {
										if (!empty($_GET['asDialog']))
												{
													//Close the dialog, reset the iframe and update the grid
													echo CHtml::script("window.parent.$('#cru-dialog').dialog('close');window.parent.$('#cru-frame').attr('src','');window.parent.$.fn.yiiGridView.update('{$_GET['gridId']}');");
														Yii::app()->end();
												}
			  
										
				
								}else {
								}
		
		
		//----- begin new code --------------------
				//if (!empty($_GET['asDialog']))
					$this->layout = '//layouts/iframe';
    //----- end new code --------------------
		
		
		
		}
		if (!empty($_GET['asDialog']))
					$this->layout = '//layouts/iframe';
		$this->render('_form_direcciones',array('model'=>$model,'codpro'=>$_GET['codpro']));
		
	}
	/**
	 * Updates a particular model.
	 * If update is successful, the browser will be redirected to the 'view' page.
	 * @param integer $id the ID of the model to be updated
	 */
	public function actionUpdate($id)
	{
		$model=$this->loadModel($id);

		// Uncomment the following line if AJAX validation is needed
		 $this->performAjaxValidation($model);

		if(isset($_POST['Clipro']))
		{
					$model->attributes=$_POST['Clipro'];
				if($model->save()) {
										/*if (!empty($_GET['asDialog']))
												{
													//Close the dialog, reset the iframe and update the grid
													echo CHtml::script("window.parent.$('#cru-dialog').dialog('close');window.parent.$('#cru-frame').attr('src','');window.parent.$.fn.yiiGridView.update('{$_GET['gridId']}');");
														Yii::app()->end();
												}*/
			  
										//ASUSTANDO AL USUARP APRA QUE LLEN LAS DIRECIONES 
										 Direcciones::model()->find("c_hcod=:codigo", array(":codigo"=>$model->codpro));
										 if (is_null(Direcciones::model()->find("c_hcod=:codigo", array(":codigo"=>$model->codpro)))) 
										  {
										    $this->redirect(array('update','id'=>$model->codpro));
										  }else {
											$this->redirect(array('view','id'=>$model->codpro));							  
										   }
										
				
								}else {
								}
		
		if (!empty($_GET['asDialog']))
					$this->layout = '//layouts/iframe';
    //----- end new code --------------------
		
		$this->render('update',array('model'=>$model,'proveedor'=>$proveedor,'proveedor2'=>$proveedor2));
		
		
		}
		
		
						//$filtro1=$model->attributes['razondestinatario'];
					$modelodirecciones = new Direcciones;
					$modelocontactos =new Contactos;
					$modeloobjetos=new ObjetosCliente;
						$criteriazo=new CDbCriteria;
						$criteriazo->condition = "c_hcod ='".$model->codpro."'";
							//$criteria->compare('razondestinatario', 'SOLTE',true);
							//$criteria->compare('descripcion', 'ADE',true);
								//echo $model->attributes['descripcion'];
								$proveedor = new CActiveDataProvider($modelodirecciones, array(
									'criteria'=>$criteriazo,
									));	
								//$this->render('busca',array('model'=>$model,'proveedor'=>$proveedor));
							//$modelodirecciones=Direcciones::find('c_hcod=:c_hcod', array(':c_hcod'=>$model->codpro));
							//$modelocontactos =Contactos::model()->find('c_hcod=:c_hcod', array(':c_hcod'=>$model->codpro));
						$proveedor2= new  CActiveDataProvider($modelocontactos, array(
									'criteria'=>$criteriazo,
									));
									$criteriazo1=new CDbCriteria;
						$criteriazo1->condition = "codpro ='".$model->codpro."'";
						$proveedor3= new  CActiveDataProvider($modeloobjetos, array(
									'criteria'=>$criteriazo1,
									));			
									
									
		 //----- begin new code --------------------
				if (!empty($_GET['asDialog']))
					$this->layout = '//layouts/iframe';
    //----- end new code --------------------
		
		$this->render('update',array('model'=>$model,'proveedor'=>$proveedor,'proveedor2'=>$proveedor2,'proveedor3'=>$proveedor3));
		
	}

	/**
	 * Deletes a particular model.
	 * If deletion is successful, the browser will be redirected to the 'admin' page.
	 * @param integer $id the ID of the model to be deleted
	 */
	public function actionDelete($id)
	{
		$this->loadModel($id)->delete();

		// if AJAX request (triggered by deletion via admin grid view), we should not redirect the browser
		if(!isset($_GET['ajax']))
			$this->redirect(isset($_POST['returnUrl']) ? $_POST['returnUrl'] : array('admin'));
	}

	/**
	 * Lists all models.
	 */
	public function actionIndex()
	{
		$dataProvider=new CActiveDataProvider('Clipro');
		$this->render('index',array(
			'dataProvider'=>$dataProvider,
		));
	}

	/**
	 * Manages all models.
	 */
	public function actionAdmin()
	{
		
		$model=new Clipro('search');
		$model->unsetAttributes();  // clear any default values
		if(isset($_GET['Clipro']))
			$model->attributes=$_GET['Clipro'];
			if (isset($_GET['espe'])) {
			         // $this->render('ju',array('data'=>$model->search()->getdata()));
					$modelito=new Clipro('search_');
					$modelito->unsetAttributes();  // clear any default values
					if(isset($_GET['Clipro']))
						$modelito->attributes=$_GET['Clipro'];
						$data=$modelito->search_()->getdata();
						Yii::import('application.extensions.phpexcel.JPhpExcel');
						$xls = new JPhpExcel('UTF-8', false, 'My Test Sheet');
						$xls->addArray($data);
						$xls->generateXML('my-test');
							Yii::app()->end();
			           } 
		$this->render('admin',array(
			'model'=>$model,
		));
		
		
	}

	/**
	 * Returns the data model based on the primary key given in the GET variable.
	 * If the data model is not found, an HTTP exception will be raised.
	 * @param integer the ID of the model to be loaded
	 */
	public function loadModel($id)
	{
		$model=Clipro::model()->findByPk($id);
		if($model===null)
			throw new CHttpException(404,'El enlace o direccion solicitado no existe');
		return $model;
	}

	/**
	 * Performs the AJAX validation.
	 * @param CModel the model to be validated
	 */
	protected function performAjaxValidation($model)
	{
		if(isset($_POST['ajax']) && $_POST['ajax']==='clipro-form')
		{
			echo CActiveForm::validate($model);
			Yii::app()->end();
		}
	}
}
