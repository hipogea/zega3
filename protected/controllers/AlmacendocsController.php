<?phpconst ESTADO_PREVIO='99';const ESTADO_CREADO='10';const ESTADO_EFECTUADO='20';const ESTADO_ANULADO='30';const MOV_SALIDA_RESERVA='10';const AN_MOV_SALIDA_RESERVA='20';const MOV_INGRESO_COMPRA='30';const AN_MOV_INGRESO_COMPRA='40';const MOV_SALIDA_CECO='50';const AN_MOV_SALIDA_CECO='60';const MOV_INGRESO_CONSIGNACION='31';const AN_MOV_INGRESO_CONSIGNACION='13';const MOV_DEVOLUCION_PROVEEDOR='41';const MOV_INICIAR_TRASLADO='77';const AN_MOV_INICIAR_TRASLADO='64';const MOV_SALIDA_TRASLADO='45';const MOV_INGRESA_TRASLADO='78';const AN_MOV_INGRESA_TRASLADO='54';const MOV_REINGRESO_MATERIAL='70';const MOV_SALIDA_VENTA='79';const AN_MOV_SALIDA_VENTA='81';const MOV_MOV_CARGA_INICIAL='98';const AN_MOV_CARGA_INICIAL='89';const MOV_DEVOLUCION_CLIENTE='97';const COD_DOCUMENTO_COMPRAS='210';const COD_MOVIMIENTO_SERVICIO='68';const COD_MOV_INGRESO_OT='14';class AlmacendocsController extends ControladorBase{	public function __construct() {		parent::__construct($id='almacendocs',Null);		$this->documento='101';		$this->modelopadre='Almacendocs';		$this->modeloshijos=array('Alkardex'=>'Tempalkardex');		$this->documentohijo='460';		$this->campoestado='cestadovale';		$this->ConfigArreglos();		//$nuevo=new $this->modelopadre;		//$this->campoenlace=$nuevo->getFieldLink($nuevo->relations(),$this->modelopadre,);	}	private function Verificamov($mov){		if(is_null(Almacenmovimientos::model()->findByPk($mov)) ){                                               // $this->                    throw new CHttpException(500,'La Seleccion del movimiento debe de hacerse, desde el formulario, No se encontro el movimiento ');	                   }			}	public function actionAlmacenes(){		$model=new VwStocktotalAlmacenes('search');		$model->unsetAttributes();  // clear any default values		if(isset($_GET['VwStocktotalAlmacenes']))			$model->attributes=$_GET['VwStocktotalAlmacenes'];			$nuevo=New Alinventario();		// new CArrayDataProvider($dataArray);		$datostocktotales=$nuevo->getStockValTotal();		$proveedor=new CArrayDataProvider($nuevo->getStockValAlmacen());		$this->render('adminalmacenes',array(			'model'=>$model,			'proveedor'=>$proveedor,			'stocktotales'=>$datostocktotales,		));	}public function actionVer($id){	$id=(integer)MiFactoria::cleanInput($id);	$modelo=$this->loadModel($id);	$this->render('n_form_ver',array('model'=>$modelo));}	public function actionEditar($id)	{		$model=MiFactoria::CargaModelo($this->modelopadre,$id);		$ahora=time();		if($model->cestadovale==ESTADO_PREVIO and ($ahora-strtotime($model->fechacre.'')>24*60*60))		{			$model->delete();			$this->redirect(array('admin'));yii::app()->end();		}		$this->performAjaxValidation($model);		if($this->itsFirsTime($id))		{			if($this->getUsersWorkingNow($id))			{ //si esta ocupado	MiFactoria::Mensaje('error', "El documento esta siendo modificado por otro usuario ");				$this->redirect(array('ver','id'=>$model->id));			} else { // Si no lo esta renderizar sin mas				//$model->setScenario('buffer');				$this->setBloqueo($id) ; 	///bloquea				$numero=$this->ClearBuffer($id); //Limpia temporal antes de levantar								$this->IniciaBuffer($id); //Levanta temporales				$this->render('n_form',array('model'=>$model));				yii::app()->end();			}		} else {			if($this->isRefreshCGridView($id))			{ //si esta refresh de grilla				$this->render('n_form',array('model'=>$model));				yii::app()->end();			} else { // Si no lo es  tenemos que analizar los dos casos que quedan				if($this->IsRefreshUrlWithoutSubmit($id))				{ ///Solo refreso la pagina					MiFactoria::Mensaje('notice', "No has confirmado los datos, solo haz refrescaod la pagina ");					$this->render('n_form',array('model'=>$model));					yii::app()->end();				} else { 	 ///Ahora si recein se animo a hacer $_POST	, y confirmar los datos					iF(isset($_POST[$this->modelopadre])) {						$model->attributes=$_POST[$this->modelopadre];						if($this->hubocambiodetalle($id)) {							if($model->save()){								$this->ConfirmaBuffer($id); //Levanta temporales								$this->ClearBuffer($id);								$this->terminabloqueo($id);								MiFactoria::Mensaje('success', "Se grabo el documento  ".$this->SQL);								$this->redirect(array('ver','id'=>$model->id));							} else {								$this->render('n_form',array('model'=>$model));								yii::app()->end();							}						} else   {							MiFactoria::Mensaje('notice', "  Enviaste los datos pero no has modificado nada.... ");							$this->render('n_form',array('model'=>$model));							yii::app()->end();						}					} else  { //En este caso quiere decir que la sesion/bloqueo anterior no se ha cerrado correactmente						$this->terminabloqueo($id);						$this->SetBloqueo($id);						MiFactoria::Mensaje('notice', "NO cerraste correctamente, Ya tenías una sesion abierta en este domcuento,");						$this->render('n_form',array('model'=>$model));						yii::app()->end();					}				}			}		}	}public function efectuamovimiento($model /*$id*/){	if($model->codocuref==$this->documento) //Si en este vale se ha tratado otro vale como referencia	{		$valetratado= $registro=Almacendocs::model()->find("numvale=:nimi",array("nimi"=>trim($model->numdocref)));	     $valetratado->setScenario('cambioestado');		 $valetratado->cestadovale=$model->almacendocs_almacenmovimientos->eventos->estadofinal;		$valetratado->save();		unset($valetratado);	}}public function actionexpedicion(){	if (!isset($_POST['codiguito'])  OR is_null($_POST['codiguito'])){		echo "Error:  debes de selecccionar un punto de expediucion";	} else {		$punto=$_POST['codiguito'];        $identidad=$_POST['identidad'];		$responsable=$_POST['responsable'];		echo " es idetidad ".$identidad;		$hijos=MiFactoria::DevuelveKardexHijos($identidad);		foreach($hijos as $filita){			MiFactoria::insertadespacho($filita->id,$punto,$responsable);		    }             echo "Se ha colocado los materiales en Expedicion ";	}                        }	public function borrakardexhijos($id){		MiFactoria::Borrahijoskardex($id);	}        	public function actionConfirmar($id)	{                                                 ///pirmero que nada verificamos que ha habido algun error                                     $model=MiFactoria::CargaModelo($this->modelopadre,$id);		$this->performAjaxValidation($model);		if($this->itsFirsTime($id))		{			if($this->getUsersWorkingNow($id))			{ //si esta ocupado					$this->redirect(array('ver','id'=>$model->id));			} else { // Si no lo esta renderizar sin mas				$this->setBloqueo($id) ; 	///bloquea				$this->ClearBuffer($id); //Limpia temporal antes de levantar				MiFactoria::insertadetalles($model->id,$model->codmovimiento,$model->numdocref);				//$this->IniciaBuffer($id); //Levanta temporales				$this->render('n_form',array('model'=>$model));				yii::app()->end();			}		} else {			if($this->isRefreshCGridView($id))			{ //si esta refresh de grilla				$this->render('n_form',array('model'=>$model));				yii::app()->end();			} else { // Si no lo es  tenemos que analizar los dos casos que quedan				if($this->IsRefreshUrlWithoutSubmit($id))				{ ///Solo refreso la pagina					MiFactoria::Mensaje('notice', "No has confirmado los datos, solo haz refrescaod la pagina ");					$this->render('n_form',array('model'=>$model));					yii::app()->end();				} else { 	 ///Ahora si recein se animo a hacer $_POST	, y confirmar los datos					IF(isset($_POST[$this->modelopadre])) {						$model->attributes=$_POST[$this->modelopadre];						   $model->cestadovale='20';						//$model->dbConnection->autoCommit=false;						$transacc=Yii::app()->db->beginTransaction();						if($model->save()){								$this->efectuamovimiento($model/*$id*/); //oJO SOLO DESPUES DE COFIRMAR BUFFER							$this->ConfirmaBuffer($id); //Levanta temporales							$this->terminabloqueo($id);							$this->ClearBuffer($id);							//$this->ConfirmaBuffer($id,$transacc); //Levanta temporales										if(!$this->detectaerrores())											{												$transacc->commit();												MiFactoria::Mensaje('success', "Se grabo el documento  ".$this->SQL);												$this->ClearBuffer($id);												$this->terminabloqueo($id);												$this->redirect(array('ver','id'=>$model->id));											} else {//print_r(yii::app()->user->getFlashes());											$transacc->rollback();											//print_r(Yii::app()->user->getFlashes());die();											MiFactoria::Mensaje('error', "Se ha presentado algunos inconvenientes :<br>");											//$this->ClearBuffer($id);											//$this->terminabloqueo($id);											$this->render('n_form',array('model'=>$model));				yii::app()->end();											}							} else {								MiFactoria::Mensaje('error', " No se pudo grabar el documento  ".$this->SQL);							$this->render('n_form',array('model'=>$model));							yii::app()->end();						}					} else  { //En este caso quiere decir que la sesion/bloqueo anterior no se ha cerrado correactmente						$transacc->rollback();						// Y es posble que haya entrado despues de 2 dias, una semana asi						$this->terminabloqueo($id);						$this->SetBloqueo($id);						MiFactoria::Mensaje('notice', "NO cerraste correctamente, Ya tenías una sesion abierta en este domcuento,");						$this->render('n_form',array('model'=>$model));						yii::app()->end();					}				}			}		}	}	public function actionCrearvale()	{		$numero=Almacendocs::limpiar();		//MiFactoria::Mensaje('notice','se limpiaron '.$numero.'   REGISTRO S');		$model=new $this->modelopadre;		$model->valorespordefecto($this->documento);		//if(!empty($model->codalmacen))		/*$criteri=new CDBCriteria();		$criteri->addInCondition(Almacentransacciones::model()->);*/                if(isset($_GET['numerovale'])){	                    $numvali=  MiFactoria::cleanInput($_GET['numerovale']);                    $lista=$model->findAll("numvale=:numero",array(":numero"=>$numvali));                    if(count($lista)==0)                    {                      throw new CHttpException(400,'El número de vale especificado no existe  ');                     }else{                        // var_dump($numvali);                        $model->numdocref= $numvali;                        $model->codalmacen= $lista[0]['codalmacen'];                        $model->codcentro= $lista[0]['codcentro'];                         //var_dump($model->numdocref);                    }                }                                		if(isset($_GET['micodigomov']))		{			$this->Verificamov($_GET['micodigomov']);			$model->codmovimiento=$_GET['micodigomov'];			$model->setEscenarioMov();			$model->setScenario($model->getEscenarioMov());			$model->codocuref=Almacenmovimientos::model()->findByPk($model->codmovimiento)->codocu;		}               // var_dump($model->numdocref);die();		$this->ClearBuffer($id);		$model->iduser=Yii::app()->user->id;		if(isset($_POST[$this->modelopadre]))		{$model->attributes=$_POST[$this->modelopadre];			if($model->save()){				//var_dump($model->attributes);die();				$this->redirect(array('confirmar','id'=>$model->id));			}		}		$this->render('n_create',array('model'=>$model));	}	public function actionCrearvale1()	{		echo " El vlaor de mov es : ".$_GET['mov'];		yii::app()->end();	}	/**	 * @return array action filters	 */	public function filters()	{		return array('accessControl',array('CrugeAccessControlFilter'));	}public	function bloquearPost($postID) {		if(isset($_SESSION['postID'])) {			if ($postID == $_SESSION['postID']) {				return false;			} else {				$_SESSION['postID'] = $postID;				return true;			}		} else {			$_SESSION['postID'] = $postID;			return true;		}	}    /**	 * Specifies the access control rules.	 * This method is used by the 'accessControl' filter.	 * @return array access control rules	 */	public function accessRules()	{		Yii::app()->user->loginUrl = array("/cruge/ui/login");		return array(			array('allow',  // allow all users to perform 'index' and 'view' actions				'actions'=>array('index','view'),				'users'=>array('*'),			),			array('allow', // allow authenticated user to perform 'create' and 'update' actions				'actions'=>array('ver','verdetalle','admin','salir','confirmar','borraitems','almacenes','expedicion','editar','crearvale','Ingresatraslado','Updateingresatraslado','stock','updatetraspaso','creadetalletraspaso','pio','create','Configuraop','conformidad','crear','actualizacostos','updatereingreso','cargaums','Creadetallereingreso','cargainicial','Borraitem','AnulaSalidaReserva','Imprimirsolo','anulacargainicial',                    'Confirmaanulacargainicial','updatesalidaceco','salidaceco','anulasalidaceco','creadetalle','Ingresacompra','Updateingresacompra','Traspaso',                    'Confirmaanulacioningresocompra','Anulaingresocompra','reingreso',					'atiendesolpe','imprimir','reservar','Confirmaanulacionsalidareserva','pruebax','updatecargainicial','salidareserva','updatesalidareserva',					'update','pinta','pintakardex','generadetalle','generacontabilidad','modificadetalle'),				'users'=>array('@'),			),			array('deny',  // deny all users				'users'=>array('*'),			),		);	}/*   Pinat el stock mendiante una envio de una jax */	public function actionstock() {			if (isset($_POST['codiguito'])) {			$codigox=$_POST['codiguito'];			$centro=$_POST['centrito'];			$almacen=$_POST['almacencito'];			echo $this->renderpartial("stocks",array('codigo'=>$codigox,'centro'=>$centro,'codal'=>$almacen),true);		}	}   //Pinta la configuracion de los campos por defecto	public function actionIngresatraslado() {		$movimiento='78';		//$signo=-1;		$model=new Almacendocs;		$model->valorespordefecto($this->documento);		$model->codmovimiento=$movimiento;		$model->setscenario("traspaso");		$this->performAjaxValidation($model);		if(isset($_POST['Almacendocs']))		{			$model->attributes=$_POST['Almacendocs'];			if($model->save()) {                 $model->refresh();				//$this->render('reingreso',array('model'=>$model,'movimiento'=>$movimiento));				$this->redirect(array('Updateingresatraslado','id'=>$model->id,'movimiento'=> $movimiento));				//Yii::app()->end();			}		}		//la diferenci en ter un render y el tro lo encontramos en la condicion isenew record de la vista REINGRESO		$this->render('update',array('model'=>$model,'movimiento'=>$movimiento));	}public function Actualizaatenciones($modelokardex,$modelodesolpe=null) {	//verificando que la cantidad este bien	   $mensaj="";	    if($modelokardex->VerificaCantAtenReservas()){			$modelokardex->InsertaAtencionReserva();            /* $modelodesolpe->RefrescaestadoSolpe();			 $modelodesolpe->RefrescaestadoSolpe();*/		} else {			foreach($modelokardex->mensajes() as $clave=>$valor) {				if($clave=='error')					$mensaj.=$valor."<br>";			 }		}	return $mensaj;	/*	//Verificando que no haya exceso de cantidades		//Al igual que los costos cambiamos el signo del kardex porque se trata de algo opuesto , son atenciones		//guardamos el valor original		$cantidadoriginal=$modelokardex->cant;		$signo=-1;		$mensaj="";		$modelokardex->cant=$signo*$modelokardex->cant;		$criteria=New CDbCriteria;		$criteria->addcondition("hidesolpe=:vhidesolpe AND estadoreserva <> '30' and codocu='450'");		$criteria->params=Array(":vhidesolpe"=>$modelodesolpe->id);		$modeloreserva=Alreserva::model()->find($criteria);		$cantidadatendidaacumulada=$modeloreserva->alreserva_cantidadatendida;		if($cantidadatendidaacumulada + $modelokardex->cant <= $modeloreserva->cant) {			$modeloatenciones=New Atencionreserva();			//$mensaj.="sE CREO EL AREGISTRO ATENCIONES <BR> ";			$modeloatenciones->cant=$modelokardex->cant ;  // VALORES POSITIVOS PARA  LAS ATENCIONES y NEGATIVOS EN ANULACIONES			$modeloatenciones->hidkardex=$modelokardex->id;			$modeloatenciones->hidreserva=$modeloreserva->id;			$modeloatenciones->estadoatencion='10';			$modelodesolpe->est='50'; ///atendido parcial por ahora, luegop veremos si es una atencion completa			$modeloreserva->estadoreserva='40';///atendido parcial por ahora, luegop veremos si es una atencion completa			//si con este movimiento ya se completo la cantidad total						if(($cantidadatendidaacumulada+$modelokardex->cant== $modeloreserva->cant))							{								///$mensaj.="OK LA CANTIDAda tendida es igual a la pedida  <BR> ";								$modeloreserva->estadoreserva='20';							///Completo...!				///Veriifcar primero si DESOLPE tiene partido RESERVA +RESERVA PARA COMPRA				 				IF($modelodesolpe->numero_reservascompras == 0 ){ ///Si no tiene solicitudes de compra					       			$modelodesolpe->est='40';///Completo...!									//$mensaj.="OK se trata d una desol,pe de solo reserva  <BR> ";									//$mensaj.="eato de la desolpe ".$modelodesolpe->est."  <BR> ";							                                                 }							}			//si con este movimiento se REVERSA el total (Solo se cumple para movimientos de anulacion )			if(($cantidadatendidaacumulada+$modelokardex->cant== 0))			{				///$mensaj.="OK LA CANTIDAda tendida es igual a la pedida  <BR> ";				$modeloreserva->estadoreserva='10';				///CREADA...!				///Veriifcar primero si DESOLPE tiene partido RESERVA +RESERVA PARA COMPRA				IF($modelodesolpe->numero_reservascompras == 0 ){ ///Si no tiene solicitudes de compra					$modelodesolpe->est='60';///RESERVADO...!					//$mensaj.="OK se trata d una desol,pe de solo reserva  <BR> ";					//$mensaj.="eato de la desolpe ".$modelodesolpe->est."  <BR> ";				}			}						///cambiamos los escenarios y luego los restablecemos			                $Escenariosolpe=$modelodesolpe->getScenario();$Escenareserva=$modeloreserva->getScenario();							$modelodesolpe->setscenario('Atencionreserva') ; $modeloreserva->setscenario('cambiaestado');			                   if($modeloatenciones->save() and $modelodesolpe->save() and $modeloreserva->save())					                          {											  }else {						                         $mensaj.="No se pudieron actualizar los registros de atenciones, y  los status de las reservas y de la solicitud original del material ".$alkardex->codart;					                          }			       				//dejamos los escenarios tal cual los encontramos para no entrar en cnflictos con nadie							$modelodesolpe->setscenario($Escenariosolpe) ; $modeloreserva->setscenario($Escenareserva);		      }  else {			$mensaj.=" Se ha intentado atender una cantidad que sobrepasa la cantidad reservada original para el material ".$modelokardex->codart;                   }		//Restablecemos ek valor para no afecatra a otro sprocedimientos		$modelokardex->cant=$cantidadoriginal;		return $mensaj;*/	}/*  Devuelve un comob box para un ajax */	public function actionPintakardex() {		$numerovale=trim($_POST['Tempalkardex']['numdocref']);		$criteria = new CDbCriteria();		$criteria->addCondition("numvale=:vnumvale");		$criteria->params=array(':vnumvale'=>$numerovale);		//$valor=$_POST['Eventos']['codocu'];		$data=CHtml::listData(	VwKardex::model()->findAll( $criteria),id,descripcion);		print_r($data);	//	yii::app()->end();		echo CHtml::tag('option', array('value'=>null),CHtml::encode('Escoja un item'),true);		foreach($data as $value=>$name) {			echo CHtml::tag('option', array('value'=>$value),CHtml::encode($name),true);		}	}	public function actionCargaums() {		$numerovale=trim($_POST['Alkardex']['numdocref']);		$referencia=$_POST['Alkardex']['idref'];		$criteria = new CDbCriteria();		$criteria->addCondition("idref=:vidref");		$criteria->params=array(':vnumvale'=>$numerovale,':vidref'=>$referencia);		$criteria->addCondition("numvale=:vnumvale ");		$modelokardex=VwKardex::model()->find($criteria);		$material=trim($modelokardex->codart);		$criteria2 = new CDbCriteria();		$criteria2->addCondition("codart=:vcodart ");		$criteria2->params=array(':vcodart'=>$material);         VwAlconversiones::model()->findAll($criteria2);		//$valor=$_POST['Eventos']['codocu'];		$data=CHtml::listData(	VwKardex::model()->findAll( $criteria),um2,desum2);		$modelomaterial=Maestrocompo::model()->findByPk($material);		//este vacio ono , garegamos la unidad de medida base		if(count($data)==0)		array_push($data,array($modelomaterial->um=>$modelomaterial->maestro_ums->desum));		print_r($data);		yii::app()->end();		//print_r($data);		//yii::app()->end();		echo CHtml::tag('option', array('value'=>null),CHtml::encode('um'),true);		foreach($data as $value=>$name) {			echo CHtml::tag('option', array('value'=>$value),CHtml::encode($name),true);		}	}	public function actionBorraitems()	{		$cadeni="";		$autoIdAll = $_POST['cajita'];		foreach($autoIdAll as $autoId)		{			$cadeni.=$this->Borraitem($autoId);		}		echo $cadeni."<BR><BR>";	}public function Borraitem($id) {	//$identidad=$_GET["id"];	$mensaje="";	$model=Tempalkardex::model()->findByPk($id);	if(!is_null($model)){		 			//verificar si el movimietno permite borrar Items		  if($model->alkardex_almacenmovimientos->borraritems=='1'){			  if($model->delete())			  {$mensaje.="Se elimino el item sin problemas <br>";}  else{				  $mensaje.="No se pudo eliminar el registro  <br>";			  }		  }else{			  $mensaje.=" Este movimiento no permite borrar registros <br>";		  }				}else {		$mensaje.=" No se encotro un registro con ese ID <br>";	}  RETURN $mensaje;  }    public function actionimprimir($id) {		$modelo=$this->loadModel($id);		$this->redirect(array('/coordocs/hacereporte',			'id'=>$modelo->almacendocs_documentos->idreportedefault,			'idfiltrodocu'=>$modelo->id		));        yii::app()->end();        $cadena=$this->renderpartial('vw_grilla_imprimir',array('idcabecera'=>$id));        $mpdf=Yii::app()->ePdf->mpdf();        $mpdf->pagenumPrefix = 'Página  ';        $mpdf->pagenumSuffix = ' ';        $mpdf->nbpgPrefix = ' de  ';        $mpdf->nbpgSuffix = '';        $mpdf->SetFooter('{PAGENO}{nbpg}');        // $mpdf->setFooter('{PAGENO}');        $mpdf->SetDisplayMode('fullpage');        $mpdf->WriteHTML($cadena);        //$mpdf->AddPage();        //$mpdf->WriteHTML("esta es la segunda pagina");        //$mpdf->Output();        $vacr=md5(time());        $mpdf->Output();        return 1;    }    public function actionTraspaso(){        $model=new Almacendocs;		$model->valorespordefecto($this->documento);        $model->setscenario("traspaso");        if(isset($_POST['Almacendocs']))        {            $model->attributes=$_POST['Almacendocs'];            $model->codmovimiento='77';            if($model->save()) {                $movimiento='UpdateTraspaso';                $this->redirect(array('updateTraspaso','id'=>$model->id,'movimiento'=> $movimiento));            }        }        $this->render('traspaso',array(            'model'=>$model,        ));    }public function actionCreadetalle($idcabeza,$cest){	$modelocabeza=$this->loadModel((int)MiFactoria::cleanInput($idcabeza));		$model=new Tempalkardex();		//$model->setscenario("cargainicial");	    $model->codmov=$modelocabeza->codmovimiento;	    $model->setScenario($modelocabeza->codmovimiento."_SCN");			$this->transfieredatosalhijo($model,$modelocabeza);		if(isset($_POST['Tempalkardex']))		{			$model->attributes=$_POST['Tempalkardex'];						if($model->save())					  if (!empty($_GET['asDialog']))												{													//Close the dialog, reset the iframe and update the grid													echo CHtml::script("window.parent.$('#cru-dialogdetalle').dialog('close');													                    window.parent.$('#cru-detalle').attr('src','');																		window.parent.$.fn.yiiGridView.update('detalle-grid');																		");														Yii::app()->end();											}		}		$this->layout = '//layouts/iframe';		$this->render('_form_detalle',array(			'model'=>$model, 'idcabeza'=>$idcabeza		));}	public function actionCreadetalletraspaso($idcabeza){		$modelocabeza=$this->loadModel((int)MiFactoria::cleanInput($idcabeza));		$model=new Tempalkardex();		$model->setscenario("traspaso");		$model->codmov=$modelocabeza->codmovimiento;			$this->performAjaxValidation($model);			if(isset($_POST['Tempalkardex']))			{				$model->attributes=$_POST['Tempalkardex'];				///agregamos los atributois quye faltan para compeltar				///los datos				$modeloreferencia=Almacendocs::model()->findByPk($idcabeza);			//	$modelocabecera=Almacendocs::model()->findByPk($idcabeza);				$model->fechadoc=$modeloreferencia->fechavale;				$model->codmov='77';				$model->codcentro=$modeloreferencia->codcentro;				$model->alemi=$modeloreferencia->codalmacen;				$model->aldes=$modeloreferencia->codaldestino;				$model->fecha=$modeloreferencia->fechacont; //la fecha contable				//$model->um=$modeloreferencia->um;				$model->codocuref=$modeloreferencia->codocu;				$model->idref=$modeloreferencia->id; //aqui esta lapublic_auditor				$registroinv=Alinventario::model()->encontrarregistro($model->codcentro,$model->alemi,$model->codart);				$model->preciounit=$registroinv->punit;				//echo "  centro  emisro :  ".$model->codcentro."<br>";				//echo "  almacen  emisto  :  ".$model->alemi."<br>";				//echo "  material  :  ".$registroinv->codart."<br>";				//echo " preciounitario  :  ".$registroinv->punit."<br>";				//yii::app()->end();				if($model->save()){					  ///					if (!empty($_GET['asDialog']))					{						echo CHtml::script("window.parent.$('#cru-dialogdetalle').dialog('close');													                    window.parent.$('#cru-detalle').attr('src','');																		window.parent.$.fn.yiiGridView.update('detalle-grid');																		");					}				}			  }			$this->layout = '//layouts/iframe';			$this->render('_detalle_traspaso',array(				'model'=>$model, 'idcabeza'=>$idcabeza			));	}	public function actionCreadetallereingreso($idcabeza){		$modelocabeza=$this->loadModel((int)MiFactoria::cleanInput($idcabeza));		$model=new Tempalkardex();		$model->setscenario("reingreso");		$model->codmov=$modelocabeza->codmovimiento;			//$this->performAjaxValidation($model);			if(isset($_POST['Tempalkardex']))			{				$model->attributes=$_POST['Tempalkardex'];				$modeloreferencia=Alkardex::model()->findByPk($model->idref);				$modelocabecera=Almacendocs::model()->findByPk($idcabeza);				$model->codart=$modeloreferencia->codart;				$model->codmov='70';				$model->alemi=$modeloreferencia->alemi;				$model->aldes=$modeloreferencia->aldes;				$model->fecha=$modelocabecera->fechacont; //la fecha contable				$model->um=$modeloreferencia->um;				$model->codocuref=$modeloreferencia->coddoc;				$model->idref=$modeloreferencia->id; //aqui esta la clave de todo el asunto				$model->preciounit=$modeloreferencia->preciounit;				$model->codcentro=$modeloreferencia->codcentro;				if($model->save()){			///					if (!empty($_GET['asDialog']))					{						echo CHtml::script("window.parent.$('#cru-dialogdetalle').dialog('close');													                    window.parent.$('#cru-detalle').attr('src','');																		window.parent.$.fn.yiiGridView.update('detalle-grid');																		");					}				}			}			$this->layout = '//layouts/iframe';			$this->render('_detalle_reingreso',array(				'model'=>$model, 'idcabeza'=>$idcabeza			));	}public function actionCrear() {				$this->render('vw_escojer');				}	/*public function actionReservar()	{			//$modelodesolpe=Desolpe::model()->findBypk(124);			//echo $modelodesolpe->numeroreservas;			$idsolpe=$_POST['vidsolpe'];			$cantcompra=$_POST['vcantcompra'];		  // $idsolpe=168;			$cantreservada=$_POST['vcantreserva'];			//$cantreservada=1;			//$cantcompra=0;			$modelodesolpe=Desolpe::model()->findBypk($idsolpe);						$cadena="";	 if (($cantreservada+$cantcompra) <= $modelodesolpe->cant ) {///verificando primero que no se haya reservado antes , si hay breservas //simplemente no hacer nada		if ($modelodesolpe->numeroreservas ==0 ) {					$transaccion=$modelodesolpe->dbConnection->beginTransaction();										$modelo=new Alreserva;					$modelo->hidesolpe= $idsolpe;					$modelo->cant=$cantreservada;					$modelo->flag='1';										//ahora tratamos el inventario					$modeloinventario=Alinventario::model()->findByPk($modelodesolpe->desolpe_alinventario->id);			   if(!is_null($modeloinventario)) {					    //verificando consitencia de las cantidades del inventario					    if( $cantreservada <= $modeloinventario->cantlibre) { // Si se intenta reservar algo que no hay en stock																	if ($cantcompra > 0 ) {		 									$modelin=new Alreserva;											$modelin->hidesolpe= $idsolpe;											$modelin->cant=$cantcompra ;											$modelin->flag='0';																				}										$modelodesolpe->est='60'; //estado 'TOMADO'											$modeloinventario->setscenario('modificacantidad');											$modeloinventario->cantlibre=$modeloinventario->cantlibre-$cantreservada;											$modeloinventario->cantres=$modeloinventario->cantres+$cantreservada;																			/*	$cadena="a";									   									if (!$modelo->save()) $cadena=$cadena." -reserva reserva  falla";										if (!$modelin->save()) $cadena=$cadena." -reserva compra  falla";										if (!$modeloinventario->save()) $cadena=$cadena." -inventario  falla";										 if (!$modelodesolpe->save()) $cadena="solpe falla";										 $transaccion->commit();										 echo $cadena;											//$transaccion->rollback();											*/																					/*if(										$modelodesolpe->save() and 										$modelo->save() and										$modeloinventario->save() and 										($cantcompra>0)?$modelin->save():true ) {										$transaccion->commit();									  } else {									  	$transaccion->rollback(); ///regresar todo a como estaba									  	throw new CHttpException(500,'Hubo un error al intentar escribir datos en Disco ');									  } 							} ///si se intenta reserva algo que no hay no hacer nada							else {									$cadena=" Esta intentado reservar una cantidad mayor al stock libre ";							}			      } // SI no se encuentra el registro inventario			       else {			       		$cadena= " No se encontro este material en el inventario, revise si esta ampliado en el alamcen y el centro ";			       }		} //fin de si encontro la reserva 		else {			$cadena=" Ya hay reservas para esta solicitud ";		}	} else {		$cadena=" Esta intentando atender una cantidad mayor a la solicitada ";	}		$command = Yii::app()->db->createCommand(" insert into logdesolpe (mensa) values ('".$cadena."') "); 	$command->execute();		//$transaccion->commit(); 																	}*/		public function actionModificadetalle($id)		{		$model=Tempalkardex::Model()->findByPk($id);		 if ($model===null)		 	 throw new CHttpException(500,'No se encontro ningun documento Kardex para estos datos :'.$id);		// Uncomment the following line if AJAX validation is needed		//$this->performAjaxValidation($model);			if($model->alkardex_almacendocs->cestadovale==ESTADO_EFECTUADO){				$model->setScenario("EFECTUADO");			}ELSE{				$model->setScenario($model->codmov."_SCN");			}		if(isset($_POST['Tempalkardex']))		{			$model->attributes=$_POST['Tempalkardex'];			//$model->setScenario('salidareserva');			// echo "cantidad ".$model->cant;			// yii::app()->end();			if($model->save())					  if (!empty($_GET['asDialog']))												{													/*echo "cantidad ".$model->cant;													 yii::app()->end();*/													//Close the dialog, reset the iframe and update the grid													echo CHtml::script("window.parent.$('#cru-dialogdetalle').dialog('close');													                    window.parent.$('#cru-detalle').attr('src','');																		window.parent.$.fn.yiiGridView.update('detalle-grid');																		");														Yii::app()->end();												}		}		 if (!empty($_GET['asDialog']))		$this->layout = '//layouts/iframe';			$this->render('_form_detalle',array(										'model'=>$model, 'idcabeza'=>$model->hidvale,		            							)						);	}/****************************************************	 *	Retorna una cadena '' o 'disabled' para deshabilitar los controles del form de la vista	 *   este es un flag para deshabilitar controles y no recarga Sqls , ES PLANO	 ****************************************************/	public function eseditable($estadodelmodelo)	{		if ( $estadodelmodelo=='99' or empty($estadodelmodelo) or is_null($estadodelmodelo)) {return '';} else{return 'disabled';}	}		/****************************************************	 *	Retorna una BOOEANO  para deshabilitar los controles del form de la vista	 *   ESTE SI VERIFICA EN  LA BASE DE DATOS	 ****************************************************/	public function eseditablecab($id)	{		$modelin=$this->loadModel($id);		$estadodelmodelo=$modelin->cestadovale;		if ($estadodelmodelo=='10' or $estadodelmodelo=='99' or empty($estadodelmodelo) or is_null($estadodelmodelo)) {return 'si';} else{return 'no';}	}    public function actionCargainicial() {        $model=new Almacendocs;		$model->valorespordefecto();        // Uncomment the following line if AJAX validation is needed        // $this->performAjaxValidation($model);        if(isset($_POST['Almacendocs']))        {            $model->attributes=$_POST['Almacendocs'];            $model->setscenario("cargainicial");            $model->codmovimiento='98';            if($model->save()) {                /*$model->refresh();                echo  "salio ".$model->id;                Yii::app()->end();                    */                 $movimiento='Updatecargainicial';                $this->redirect(array('updatecargainicial','id'=>$model->id,'movimiento'=> $movimiento));            }        }        $this->render('cargainicial',array(            'model'=>$model,        ));    }	public function actionVerdetalle($id)	{		$id=(integer)MiFactoria::cleanInput($id);		$model=Alkardex::Model()->findByPk($id);		if ($model===null)			throw new CHttpException(500,'No se encontro ningun documento Kardex para estos datos :'.$id);		if (!empty($_GET['asDialog']))			$this->layout = '//layouts/iframe';		$this->render('_form_detalle_ver',array(			'model'=>$model, 'idcabeza'=>$model->hidvale,			)		);	}		public function actionIngresacompra() {		$model=new Almacendocs;		$model->valorespordefecto();        $model->setscenario("ingresacompra");           if(isset($_POST['Almacendocs']))									{										$model->attributes=$_POST['Almacendocs'];									 					$model->codmovimiento='30';						if($model->save()) {                           // echo  "salio ".$model->id;                           // Yii::app()->end();									/*                                     $model->refresh();*/									 $movimiento='UpdateIngresacompra';									$this->redirect(array('updateIngresacompra','id'=>$model->id,'movimiento'=> $movimiento));			     						}									}					$this->render('cargainicial',array(			'model'=>$model,																		));	}		public function actionSalidaReserva() {		$model=new Almacendocs;		$model->valorespordefecto($this->documento);		$model->setscenario("salidareserva");				// Uncomment the following line if AJAX validation is needed				// $this->performAjaxValidation($model);				if(isset($_POST['Almacendocs']))									{										$model->attributes=$_POST['Almacendocs'];									 											 					$model->codmovimiento='10';						 									if($model->save()) {									//$this->generadetalle($model);									 $movimiento='UpdateSalidaReserva';									$this->redirect(array('updateSalidaReserva','id'=>$model->id,'movimiento'=> $movimiento));			     						}									}					$this->render('salidareserva',array(			'model'=>$model,																		));	}	public function actionSalidaceco() {		$model=new Almacendocs;		$model->valorespordefecto();		$model->setscenario("salidaceco");		$movimiento='50';		// Uncomment the following line if AJAX validation is needed		// $this->performAjaxValidation($model);		if(isset($_POST['Almacendocs']))		{			$model->attributes=$_POST['Almacendocs'];			$model->codmovimiento='50';			if($model->save()) {				//$this->generadetalle($model);				$movimiento=$movimiento;				$this->redirect(array('updatesalidaceco','id'=>$model->id,'movimiento'=> $movimiento));			}		}		$this->render('salidaceco',array(			'model'=>$model,'movimiento'=> $movimiento		));	}    Public function actualizaoc($movimiento, $model,$transaccion) {        //debemos de actusalizar los registros de kardex hijos        //recorriendo el kardex        $statusacolocar=null;            if ($movimiento=='30') {                $hijos=Alkardex::model()->findall("hidvale=:hid",array(":hid"=>$model->id));                for ($i=0; $i < count($hijos); $i++) {                    $modelodetalle=Docompra::model()->findByPk($hijos[$i]['idref']);                    $cantiatendida=$modelodetalle->cantidadentregada; ///la cantidada atendida                    $cantidadingresada=$hijos[$i]['cant'];                    $modelodetalle->setScenario('ingresacompra');                  if($cantidadingresada <= $modelodetalle->cant-$cantiatendida) {                      $modelentregas=new Alentregas;					  $modelentregas->iddetcompra=$modelodetalle->id;                      $modelentregas->cant=$hijos[$i]['cant'];                      $modelentregas->fecha=date("Y-m-d H:i:s");                      $modelentregas->idkardex=$hijos[$i]['id'];                      $modelentregas->usuario=Yii::app()->user->name;                      //actualizando el status del detalle de la OC                      $modelodetalle->estadodetalle=($cantidadingresada==($modelodetalle->cant-$cantiatendida))?'60':'50';							//revisando las reservas					     $modeloreserva=Alreserva::model()->find("hidesolpe=:xidsolpe AND codocu='800' ",array(":xidsolpe"=>$modelodetalle->id));					  if(!is_null($modeloreserva)) {									$modeloreserva->setscenario('cambiaestado');									$modeloreserva->estadoreserva=($cantidadingresada==($modelodetalle->cant-$cantiatendida))?'40':'20';									$modeloreserva->save();						 					 ECHO "SI SALIO LA RESERVA";											 $transaccion->rollback();						  							Yii::app()->end();													}                            } else {                             $transaccion->rollback();                             //revertimos la transaccion                             throw new CHttpException(500,'La cantidad del item excede a lo que se ha comprado');                            }                    $modelodetalle->save();                    $modelentregas->save();               // $statusacolocar='02'; ///actualizar EL VALE                    }  //FIN DEL BUCLE                   }  // fin de si es un ingreso        if ($movimiento=='40') {            //SACAMOS LOS KARDEX HIJOS DEL VALE REFRENCIADO, OJO , NO EL VALE ACTUAL            $valeref=Almacendocs::model()->findAll("numvale=:xnumvale",array(":xnumvale"=>trim($model->numdocref)));            if(count($valeref) > 0) {                $hijos=Alkardex::model()->findall("hidvale=:hid",array(":hid"=>$valeref[0]['id']));                             for ($i=0; $i < count($hijos); $i++) {                                 //detalle de la OC                                 $modelentregas=Alentregas::model()->find("idkardex=:xidkardex",array(":xidkardex"=>$hijos[$i]['id']));                                 if( !$modelentregas==null) {                                    // $transaccion->rollback();                                     //throw new CHttpException(500,'qeup paso   '.$modelentregas->idkardex);                                     $detalleoc=Docompra::model()->findByPk($modelentregas->iddetcompra);                                     $detalleoc->setScenario('ingresacompra');                                     ///!CUIDADO LA ETREHA VAYA  A ESTAR FACTURADO                                     if($modeloentregas->estado=='20')  {                                         $transaccion->rollback();                                         throw new CHttpException(500,'No se puede anular hay entregas facturadas, OC :'.$detalleoc->docompra_ocompra->numcot.'Item :'.$detalleoc->item.' ');                                     }                                 ///resolviendo el tema de los status del detalle de la OC                                     $cantiatendida=$detalleoc->cantidadentregada;                                     if (abs($hijos[$i]['cant']) == $cantiatendida)  //Si es un ingreso unico                                         $detalleoc->estadodetalle='20'; ///aprobado                                     if (abs($hijos[$i]['cant']) < $cantiatendida)  //Si es un ingreso parcial                                         $detalleoc->estadodetalle='50'; ///atencionm parcial                                     $modelentregas->delete(); //borrar las entregas                                 } ELSE {                                     $transaccion->rollback();                                     throw new CHttpException(500,'No se pudo hallar la entrega correspondiente al item del vale '.$hijos[$i]['id']);                                 }                                if( !($detalleoc->save() and $modelentregas->save())) {                                    $transaccion->rollback();                                   throw new CHttpException(500,'No se pudograbar el detalle de la OC, o borrar las entregas');                                  }                             }               }else {                $transaccion->rollback();                throw new CHttpException(500,'El numero de vale a anular no es valido, verifique la entrada :   Vale a anular:'.$model->numdocref.'   Vale actual:'.$model->numvale);             }            }        }     ///SI SE TRATA DE UNA ANULACION    public function actionAnulaCargainicial() {        $movimiento='99';        $signo=-1;		$model=new Almacendocs;		$model->valorespordefecto();		$model->setscenario("anulacargainicial");		$model->codmovimiento=$movimiento;				// Uncomment the following line if AJAX validation is needed				$this->performAjaxValidation($model);				if(isset($_POST['Almacendocs']))									{									$modeloaanular=Almacendocs::model()->find("numvale=:nimi",array("nimi"=>trim($_POST['Almacendocs']['numdocref'])));												$model->attributes=$_POST['Almacendocs'];									 											 					$model->codmovimiento=$movimiento;											$model->codcentro=$modeloaanular->codcentro; 						 									if($model->save()) {											//$matriz=Almacendocs::model()->findAll("numvale=:nimi",array("nimi"=>trim($_POST['Almacendocs']['numdocref'])));											$matrizkardex=Alkardex::model()->findall("hidvale=:xid",array("xid"=>$modeloaanular->id));											//echo $matriz[0]['id'];											//Yii::app()->end();							 //echo "salio".count($matrizkardex);							   for ($i=0; $i < count($matrizkardex); $i++) { 							   							   //creando un clon de lo que s equiere anular 							   $modelok=new Alkardex;							   $modelok->hidvale=$model->id;							   $modelok->codocuref='101'; //vale almacen							   $modelok->numdocref=$model->numvale;							   $modelok->setscenario('anulacargainicial'); ///El escenario es el mismo de la carga inicial							   $modelok->codart=trim($matrizkardex[$i]['codart']);							   $modelok->cant=$signo*$matrizkardex[$i]['cant'];							   $modelok->um=$matrizkardex[$i]['um'];							   $modelok->preciounit=$matrizkardex[$i]['preciounit'];							   $modelok->codcentro=$matrizkardex[$i]['codcentro'];							   $modelok->alemi=$matrizkardex[$i]['alemi'];							   $modelok->fechadoc=$model->fechavale;							   $modelok->fecha=$model->fechacont;							    $modelok->idref=$modeloaanular->id;							     $modelok->codmov=$movimiento ;							   $modelok->save();							   $modeloaanular->cestadovale='30'; //ANULAR							   $modeloaanular->save();							 														 								///anulacion 															   //actualiza el precio pero con los id de los kardex originales									//Alkardex::model()->findByPk($matrizkardex[$i]["id"])->Actualizaprecioinventario( $modelok->codmov);																	}						 $movimiento='Confirmaanulacioncargainicial';							 $this->redirect(array('confirmaanulacargainicial','id'=>$model->id,'movimiento'=> $movimiento));							 																					//$this->generadetalle($model);									// $movimiento='Updatecargainicial';									//$this->redirect(array('updatecargainicial','id'=>$model->id,'movimiento'=> $movimiento));			     						}									}					$this->render('anulacargainicial',array(			'model'=>$model,																		));		/*		$model=$this->loadModel($id);						$transaccion=$model->dbConnection->beginTransaction();							$matrizkardex=Alkardex::model()->findall("hidvale=:xid",array("xid"=>$id));							 //echo "salio".count($matrizkardex);							   for ($i=0; $i < count($matrizkardex); $i++) { 							   //creando un clon de lo que s equiere anular 							   $modelok=new Alkardex;							   $modelok->setscenario('anulacargainicial'); ///El escenario es el mismo de la carga inicial							   $modelok->codart=trim($matrizkardex[$i]['codart']);							   $modelok->cant=$matrizkardex[$i]['cant'];							   $modelok->um=$matrizkardex[$i]['um'];							   $modelok->preciounit=$matrizkardex[$i]['preciounit'];							   $modelok->codcentro=$matrizkardex[$i]['codcentro'];							   $modelok->alemi=$matrizkardex[$i]['alemi'];							     $modelok->codmov='99' ;							   $modelok->save();							 								///anulacion 															   //actualiza el precio pero con los id de los kardex originales									Alkardex::model()->findByPk($matrizkardex[$i]["id"])->Actualizaprecioinventario( $modelok->codmov);																	}														$transaccion->commit();		*/	                    }	public function actionAnulaingresocompra() {        $movimiento='40';        $signo=-1; ///el signo es opuesto al signo de la anulacion        $model=new Almacendocs;		$model->valorespordefecto();        $model->codmovimiento=$movimiento;        $model->setscenario("anulaingresocompra");        $this->performAjaxValidation($model);        if(isset($_POST['Almacendocs']))        {            $modeloaanular=Almacendocs::model()->find("numvale=:nimi",array("nimi"=>trim($_POST['Almacendocs']['numdocref'])));            $model->attributes=$_POST['Almacendocs'];            $model->codmovimiento=$movimiento;            $model->codcentro=$modeloaanular->codcentro;            $modeloaanular->cestadovale='30'; //ANULAR            if($model->save()) {                $matrizkardex=Alkardex::model()->findall("hidvale=:xid",array("xid"=>$modeloaanular->id));                for ($i=0; $i < count($matrizkardex); $i++) {                    //creando un clon de lo que s equiere anular                    //Verificando el stock, si existe libre disponibilidad del stock para anular                    $cantidadstocklibre=Alkardex::model()->findByPk($matrizkardex[$i]['id'])->alkardex_alinventario->cantlibre;                    if ($cantidadstocklibre > $matrizkardex[$i]['cant'] ) {                        //identificando la entrega que corresponde                      // $modeloentrega= Alentregas::model()->find("idkardex=:xidkardex",array(":xidkardex"=>$matrizkardex[$i]['id']));                    $modelok=new Alkardex;                    $modelok->hidvale=$model->id;                    $modelok->codocuref='350'; //Detalle solped                    $modelok->numdocref=$model->numvale;                    $modelok->setscenario('anulaingresocompra'); ///El escenario es el mismo de la carga inicial                    $modelok->codart=trim($matrizkardex[$i]['codart']);                    $modelok->cant=$signo*$matrizkardex[$i]['cant'];                    $modelok->um=$matrizkardex[$i]['um'];                    $modelok->preciounit=$matrizkardex[$i]['preciounit'];                    $modelok->codcentro=$matrizkardex[$i]['codcentro'];                    $modelok->alemi=$matrizkardex[$i]['alemi'];                    $modelok->fechadoc=$model->fechavale;                    $modelok->fecha=$model->fechacont;                    $modelok->idref=$matrizkardex[$i]['idref'];                    $modelok->codmov=$movimiento ;                    $modelok->save();                       // if(!$modeloentrega===null)                   //  $modeloentrega->delete(); ///borrar la entrega correspondiente                     } else {                        throw new CHttpException(500,'No se puede anular este vale, ya se ha conusmido el stock libre resultadio del ingreso de la compra ');                    }                }                $modeloaanular->save();                $movimiento='Confirmaanulacioningresocompra';                $this->redirect(array('Confirmaanulacioningresocompra','id'=>$model->id,'movimiento'=> $movimiento));            }        }        $this->render('anulaingresocompra',array(            'model'=>$model,        ));    }   public function actionconfirmaanulacioningresocompra($id) {       $movimiento='40';       $model=$this->loadModel($id);       $model->setscenario("anulaingresocompra");       if(isset($_POST['Almacendocs']))       {           $model->attributes=$_POST['Almacendocs'];           //iniciamos la transaccion           $model->cestadovale='20';           $transaccion=$model->dbConnection->beginTransaction();           if($model->save()) {               //Yii::app()->end();               $this->actualizahijos($movimiento,$model,$transaccion);               $this->actualizaoc($movimiento,$model,$transaccion);               //$this->generacontabilidad($model);               //finalizamos la transaccion               $transaccion->commit();               //$this->redirect(array('view','id'=>$model->id));               MiFactoria::Mensaje('success', "..El vale se ha anulado!");               $this->render('update',array(                   'model'=>$model,                   'movimiento'=> $movimiento,               ));           } else {               //revertimos la transaccion               throw new CHttpException(500,'No se pudo grabar');           }       } else {           $movimiento='Confirmaanulacioningresocompra';           $this->render('update',array(               'model'=>$model,               'movimiento'=> $movimiento,           ));   }   }	public function actionReingreso() {       $movimiento='70';		$signo=-1;		$model=new Almacendocs;		$model->valorespordefecto();	   $model->codmovimiento=$movimiento;		$model->setscenario("reingreso");		$this->performAjaxValidation($model);			if(isset($_POST['Almacendocs']))									{										$model->attributes=$_POST['Almacendocs'];						if($model->save()) {								//$this->render('reingreso',array('model'=>$model,'movimiento'=>$movimiento));							$this->redirect(array('updatereingreso','id'=>$model->id,'movimiento'=> $movimiento));							//Yii::app()->end();								}							}					//la diferenci en ter un render y el tro lo encontramos en la condicion isenew record de la vista REINGRESO				$this->render('reingreso',array('model'=>$model,'movimiento'=>$movimiento));	}	public function actionConformidad() {		$movimiento='80';		//$signo=1;		$model=new Almacendocs;		$model->valorespordefecto();		$model->codmovimiento=$movimiento;		$model->setscenario("reingreso");		$this->performAjaxValidation($model);		if(isset($_POST['Almacendocs']))		{			$model->attributes=$_POST['Almacendocs'];			if($model->save()) {				//$this->render('reingreso',array('model'=>$model,'movimiento'=>$movimiento));				$this->redirect(array('updateacta','id'=>$model->id,'movimiento'=> $movimiento));				//Yii::app()->end();			}		}		//la diferenci en ter un render y el tro lo encontramos en la condicion isenew record de la vista REINGRESO		$this->render('conformidad',array('model'=>$model,'movimiento'=>$movimiento));	}/*	public function actualizainventario($kardex) {						//recorro todos los hijos							$modeloinventario= Alinventario::model()->findByPk($kardex->alkardex_alinventario->id);								//actualizando el inventario								$mensa.=$modeloinventario->Actualizar($kardex->codmov,$kardex->cant,$kardex->um,$kardex->preciounit);									$mensa.=(strlen($mensa) > 0)?"<br>":"";									$modeloinventario->setScenario('modificacantidad');									$mensa.=($modeloinventario->save())?"":"No se pudo actualizar el registro de Inventario del  material ".$row->codart."  <br>";	       RETURN (strlen($mensa)==0)?$modeloinventario:$mensa;	         //7SI HAY EXITO DEVULE UN REGISTRO ACTIVE RECORD DE INVENTARIO, SINO UNA CADENA	}*/  public function devuelvehijos($id){	  return MiFactoria::DevuelveKardexHijos($id);  }	public function actionAnulasalidareserva() {	$movimiento='20';	$signo=-1; ///el signo es opuesto al signo de la anulacion		$model=new Almacendocs;		$model->valorespordefecto();		$model->codmovimiento=$movimiento;		$model->setscenario("anulacargainicial");$this->performAjaxValidation($model);				if(isset($_POST['Almacendocs']))									{									$modeloaanular=Almacendocs::model()->find("numvale=:nimi",array("nimi"=>trim($_POST['Almacendocs']['numdocref'])));												$model->attributes=$_POST['Almacendocs'];						 					$model->codmovimiento=$movimiento;											$model->codcentro=$modeloaanular->codcentro; 						if($model->save()) {											$matrizkardex=Alkardex::model()->findall("hidvale=:xid and codestado <> '98'",array("xid"=>$modeloaanular->id));											  for ($i=0; $i < count($matrizkardex); $i++) { 											  //creando un clon de lo que s equiere anular 							   $modelok=new Alkardex;							   $modelok->hidvale=$model->id;							   $modelok->codocuref='350'; //Detalle solped							   $modelok->numdocref=$model->numvale;							   $modelok->setscenario('anulacargainicial'); ///El escenario es el mismo de la carga inicial							   $modelok->codart=trim($matrizkardex[$i]['codart']);							   $modelok->cant=$signo*$matrizkardex[$i]['cant'];							   $modelok->um=$matrizkardex[$i]['um'];							   $modelok->preciounit=$matrizkardex[$i]['preciounit'];							   $modelok->codcentro=$matrizkardex[$i]['codcentro'];							   $modelok->alemi=$matrizkardex[$i]['alemi'];							   $modelok->fechadoc=$model->fechavale;							   $modelok->fecha=$model->fechacont;							    $modelok->idref=$matrizkardex[$i]['idref'];							     $modelok->codmov=$movimiento ;							   $modelok->save();							   //$modeloaanular->cestadovale='30'; //ANULAR							  // $modeloaanular->save();							   }						 $movimiento='Confirmaanulacionsalidareserva';							 $this->redirect(array('confirmaanulacionsalidareserva','id'=>$model->id,'movimiento'=> $movimiento));							 }									}		$this->render('anulasalidareserva',array(			'model'=>$model,																		));			                    }			/*public function actionCreate()	{		if (empty($_POST['opciondocu'])) {				throw new CHttpException(404,'Tiene que elegir una opcion');		} else {			    $opcionmovimiento=$_POST['opciondocu'];					}			switch ($opcionmovimiento) {   												 			case '98': 						 					$this->redirect(array('Cargainicial'));						 					break;						 			case '99': 											$this->redirect(array('AnulaCargainicial'));						 					break;						 			case '10':											$this->redirect(array('SalidaReserva'));						 					break;									case '20':											$this->redirect(array('AnulaSalidaReserva'));						 					break;																				case '30':											$this->redirect(array('Ingresacompra'));						 					break;                                    case '40':                                            $this->redirect(array('Anulaingresocompra'));                                            break;                                     case '50':                                            $this->redirect(array('Salidaceco'));                                            break;										case '70':									$this->redirect(array('Reingreso'));											break;									case '60':											$this->redirect(array('Anulasalidaceco'));											break;									case '77':										$this->redirect(array('Traspaso'));									break;									case '78':										$this->redirect(array('Ingresatraslado'));										break;               						 default:											 throw new CHttpException(500,'-Se ha tomado un movimiento que no es valido '.$opcionmovimiento);	  								}			}/*	/**	 * Updates a particular model.	 * If update is successful, the browser will be redirected to the 'view' page.	 * @param integer $id the ID of the model to be updated	 */	public function actionConfirmaanulacionsalidareserva($id)	{    		$movimiento='20';		$model=$this->loadModel($id);		$model->setscenario("anulacargainicial");		if(isset($_POST['Almacendocs']))		{			$model->attributes=$_POST['Almacendocs'];			//iniciamos la transaccion 			$model->cestadovale='20';			$transaccion=$model->dbConnection->beginTransaction();			$mensa="";			if($model->save())			{			               $registroshijos=$this->devuelvehijos($model->id);				foreach  ($registroshijos as $row)				         {				              $modeloinventario=$this->actualizainventario($row);							  $registrodesolpe=Desolpe::model()->findByPk($row->idref);				               $mensa.=(GETTYPE($modeloinventario)=='object')?"":$modeloinventario;				              if(GETTYPE($modeloinventario)=='object')				                  {					                 $modeloinventario->setScenario('modificacantidad');					                   if( !$modeloinventario->save())						                   $mensa.="Hubo un error al actualizar el inventario <br>";									     $this->actualizacostos($modeloinventario,$row,$registrodesolpe,$registrodesolpe->tipimputacion,$registrodesolpe->tipsolpe);				                  }							 $this->Actualizaatenciones($registrodesolpe,$row);							 $row->setScenario('cambioestado');							 $row->valido='1';							 $row->codestado='10';							 IF(!$row->save())								 $mensa.="Error al momento de cambiar el estado del Kardex del material ".$row->codart;			                }				                  //Ahora actualizamos el status del vale original, ANULARLO !!!!				                       $valeoriginal=Almacendocs::model()->find("numvale=:vnumvale",array(":vnumvale"=>trim($model->numdocref)));				                         $valeoriginal->setScenario('cambioestado');												$valeoriginal->cestadovale='30'; //anulado				                             IF(!$valeoriginal->save())					                             $mensa.="Error al momento de cambiar el estado del Vale del material ".$valeoriginal->numvale;				if(strlen($mensa)==0)  { //Si s epudo actualziar					$transaccion->commit();					MiFactoria::Mensaje('success', "Se genero  el documento!".$mensa);					$this->render('update',array('model'=>$model,'movimiento'=>$movimiento));					yii::app()->end();				}     else   {					$transaccion->rollback();					MiFactoria::Mensaje('error', "No se pudo grabar el documento, hay  errores  :".$mensa);					$model->refresh();					$this->render('update',array('model'=>$model,'movimiento'=>$movimiento));					yii::app()->end();					//$model->refresh();				}			} else {// en caso de error				$transaccion->rollback();				MiFactoria::Mensaje('error', "No se pudo grabar el documento :".$mensa);				$model->refresh();				$this->render('update',array('model'=>$model,'movimiento'=>$movimiento));				yii::app()->end();			}			  }else {			$movimiento='Confirmaanulacargainicial';			$this->render('update',array(				'model'=>$model,				'movimiento'=> $movimiento,			));		}		/*if($model->save()) {				//Yii::app()->end();				$this->actualizasolpe($movimiento,$model,$transaccion);				$this->actualizacostes($model,$transaccion);				$this->actualizahijos($movimiento,$model,$transaccion);				//$this->generacontabilidad($model);								//finalizamos la transaccion				$transaccion->commit();				//$this->redirect(array('view','id'=>$model->id));				MiFactoria::Mensaje('success', "..La salida para reserva  se ha anulado!");						$this->render('update',array(							'model'=>$model,							'movimiento'=> $movimiento,							));			      } else {			      	//revertimos la transaccion			      	throw new CHttpException(500,'No se pudo grabar el documento vale');			      }		} else {			$movimiento='Confirmaanulacargainicial';				$this->render('update',array(			'model'=>$model,			'movimiento'=> $movimiento,		));			      }		*/	}		  Public function actualizahijos($codigomovimiento,$model,$transaccion) {  	//debemos de actusalizar los registros de kardex hijos     //recorriendo el kardex	  //solo en caso de que le movimiewto sea 98 y 99	  $todook='';	    if ( $codigomovimiento=='99' or $codigomovimiento=='98') {			$hijos=Alkardex::model()->findall("hidvale=:hid  and codestado <> '98' ",array(":hid"=>$model->id));			for ($i=0; $i < count($hijos); $i++) {					if(Alkardex::model()->findByPk($hijos[$i]["id"])->Actualizaprecioinventario()==0) {						//$transaccion->rollback();						$mensaje='Verifique el stock del material :  '. $hijos[$i]['codart']."<br>";						MiFactoria::Mensaje('error', $mensaje);						//throw new CHttpException(500,'Verifique el stock del material :  '. $hijos[$i]['codart']);						$todook=$todook.$mensaje;																										}											}		               }		 if ( $codigomovimiento=='10' or $codigomovimiento=='20') {		           $hijos=Alkardex::model()->findall("hidvale=:hid and codestado <> '98'",array(":hid"=>$model->id));						for ($i=0; $i < count($hijos); $i++) { 								if(Alkardex::model()->findByPk($hijos[$i]["id"])->Actualizareservainventario()==0) {									$mensaje='Verifique el stock del material :  '. $hijos[$i]['codart']."<br>";									MiFactoria::Mensaje('error', $mensaje);									$todook=$todook.$mensaje;								                   }											}                                            }      if ( $codigomovimiento=='30' or $codigomovimiento=='40') {          $hijos=Alkardex::model()->findall("hidvale=:hid and codestado <> '98' ",array(":hid"=>$model->id));          for ($i=0; $i < count($hijos); $i++) {              if(Alkardex::model()->findByPk($hijos[$i]["id"])->Actualizainventarioporcompras()==0) {				  $mensaje='Verifique el stock del material :  '. $hijos[$i]['codart']."<br>";				  MiFactoria::Mensaje('error', $mensaje);				  $todook=$todook.$mensaje;                  }          }      }	  if ( $codigomovimiento=='50' or $codigomovimiento=='60') {		  $hijos=Alkardex::model()->findall("hidvale=:hid  and codestado <> '98' ",array(":hid"=>$model->id));		  for ($i=0; $i < count($hijos); $i++) {				//  MiFactoria::Mensaje('error', 'Verifique la cantidad en stock del material  '. $hijos[$i]['codart']);				  $todook='';				 // throw new CHttpException(500,'No se pudo grabar actualizar el registro de inventario');			  }		  }	  if ( $codigomovimiento=='70' ) {		  $hijos=Alkardex::model()->findall("hidvale=:hid  and codestado <> '98'",array(":hid"=>$model->id));		  for ($i=0; $i < count($hijos); $i++) {			  $registrokardex=Alkardex::model()->findByPk($hijos[$i]["id"]);			  if(!is_null($registrokardex)) {				  $modeloinventario= Alinventario::model()->findByPk($registrokardex->alkardex_alinventario->id);				  //actualizando el inventario				  $resultado=$modeloinventario->Actualizar($registrokardex->codmov,					  										$registrokardex->cant,					 										 $registrokardex->um,					  										$registrokardex->preciounit					  											);				  ///tambien es necesario actualizar el detalle de la solpe				  if(strlen($resultado)> 0){ ///	Quiere decir que hubo error					  $mensaje=$mensaje."<br>".$resultado."<br>";					  MiFactoria::Mensaje('error', $mensaje);					  $todook=$todook.$mensaje;				  } else { //se actualizo ok					  $modeloinventario->setScenario('modificacantidad');					  if(!$modeloinventario->save())						  $mensaje=$mensaje."<br> No se pudo actualizar el registro del Inventario del material ".$modeloinventario->codart. "<br>";				  }			  }		  }//fon del for	  } //fon del codigo de moimievto	  $command1 = Yii::app()->db->createCommand(" delete from  ".Yii::app()->params['prefijo']."alkardex  where codestado='98' and hidvale=".$model->id."  ");	  $command1->execute();      $command = Yii::app()->db->createCommand(" update ".Yii::app()->params['prefijo']."alkardex set codestado='10', valido='1' where hidvale=".$model->id."  ");      $command->execute();	  return $todook;  }    Public function actualizasolpe($movimiento, $model,$transaccion) {  	//debemos de actusalizar los registros de kardex hijos     //recorriendo el kardex	  $todook=true;	 $statusacolocar=null;	 $hijos=Alkardex::model()->findall("hidvale=:hid and codestado='99' ",array(":hid"=>$model->id));			for ($i=0; $i < count($hijos); $i++) {						$modelodetalle=Desolpe::model()->findByPk($hijos[$i]['idref']);						$modelodetalle->setScenario('Atencionreserva');				        $modeloreserva=Alreserva::model()->find("hidesolpe=:hidesolpex and codocu='450' ", array("hidesolpex"=>$hijos[$i]['idref']));						$modeloreserva->setScenario('cambiaestado');					             if ($movimiento=='10') {					                     $modeloreserva->estadoreserva='20'; ///actualizar a reserva ATENDIDA						                  $cantidadreservada=$modeloreserva->cant;					                    if ($cantidadreservada==$modelodetalle->cant ) { //si lo que pidio es lo que se reresvo es una atencion total							                $modelodetalle->est='40'; //atendido totalmente								                } else { //en cambio						                 if (!$cantidadreservada > 0 ) //si es una cantidad reservada > 0 quiere decir que es parcial , si es cero el status no varia						                     $modelodetalle->est='50';  //atendido parcialmente								            }												//actualizamos el precio unitario real del detalle de la Solpe									 $modelodetalle->punitreal=$modelodetalle->desolpe_alinventario->punit+$modelodetalle->desolpe_alinventario->punitdif;									 $modeloreserva->atendido=date("Y-m-d H:i:s");					                         }				//echo "movimiento ".$movimiento;				//yii::app()->end();				            if ($movimiento=='20') {					                 $statusacolocar='10'; ///actualizar a reserva creada						            $cantidadreservada=$hijos[$i]['cant']; ///para la nualacion no nos hacemos probelmas solo es  la misma cantidad de kardex original							    //  if ($cantidadreservada==$modelodetalle->cant ) { //si lo que se anula es el total de lo que se pide							            $modelodetalle->est='60'; //Volver a colocar el estado 'reservado'									          //refrescar  el status de la reserva tambien pe...												$modeloreserva->estadoreserva='10'; ///								          //  } else { //en cambio  si es menor (solo puede ser menor a lo que se solicita)						             //if (!$cantidadreservada==0 ){//si es una cantidad reservada > 0 quiere decir que es parcial , si es cero el status no varia										// $modelodetalle->est='06';  //atendido parcialmente										 ///refrdescar el status de la reserva										 //refrescar  el status de la reserva tambien pe...										// $modeloreserva->estadoreserva='01'; ///									///El precio unitario real debe de ser descontado tambien en la misma proporcion									$modelodetalle->punitreal=0;										//$modelodetalle->punitreal*(1-$cantidadreservada/$modelodetalle->cant);									  $modeloreserva->atendido=null;						                  }				if($modelodetalle->save() and $modeloreserva->save()) {							  MiFactoria::Mensaje('succcess', " La solicitud  ".$modelodetalle->desolpe_solpe->numero."-".$modelodetalle->item. " se ha actualizado");						  } else {							  MiFactoria::Mensaje('error', " Hubo un error al grabar los datos de la solicitud  ".$modelodetalle->desolpe_solpe->numero."-".$modelodetalle->item. " ");								$transaccion->rollback();							    yii::app()->end();						  }			}//fin del for  }Public function actualizacostos($registroinventario,$registrokardex,$registrosolpe,$tipocolector,$materialoservicio) {	$todook="";	//Consiguiendo el CECCO	$modelogastos=New CcGastos;	$modelogastos->ceco=$registrosolpe->imputacion;	$modelogastos->monto=$registroinventario->montomovido; ///	$modelogastos->fechacontable=$registrokardex->fecha;	$modelogastos->idref=$registrokardex->id; //con el kardex lo amarramos	$modelogastos->clasecolector=$tipocolector; //CENTRO DE COSTO	$modelogastos->tipo=$materialoservicio; //materialkes	$modelogastos->codmoneda=Yii::app()->params['monedadef'];	if(!$modelogastos->save()) {		$todook.='No se pudieron grabar los costes '.$modelogastos->ceco.'  Del material  '.$registrokardex->codart.'<br>';	     }                 return $todook;         } 	Public function actualizacostes($model,$transaccion,$ceco=null) {  	//Public function actionpruebax() {		$todook=true; $hijos=Alkardex::model()->findall("hidvale=:hid and codestado not in('98')  ",array(":hid"=>$model->id));	  // $hijos=Alkardex::model()->findall("id=437");			for ($i=0; $i < count($hijos); $i++) {				$modelogastos=New CcGastos;				      if(is_null($ceco)) {						  ///Rebuscamos la solpe						  			if($hijos[$i]['codmov']=='70'){ //Si es un reingreso debemos de buscar recursivamente en el Kardex							   					 $modelodetalle=Desolpe::model()->findByPk(Alkardex::model()->findByPk($hijos[$i]['idref'])->idref);						  				} else {												$modelodetalle=Desolpe::model()->findByPk($hijos[$i]['idref']);									}							  $modelogastos->ceco=$modelodetalle->imputacion;					  } else {						   $modelogastos->ceco=$ceco;					  }						//$modelodetalle=Desolpe::model()->findByPk(232);						$modelogastos->fechacontable=$hijos[$i]['fecha'];				//Los costos salen del inventario no del precio unitario del Kardex; (Punit+ Punitdif)				  $registroinventario=Alinventario::model()->findByPk(Alkardex::model()->findByPk($hijos[$i]['id'])->alkardex_alinventario->id);				///////////////haciendo el calculo estandar de signo y conversiones				$signo=Almacenmovimientos::model()->findByPk($hijos[$i]['codmov'])->signo*-1;  /// Como son costos , es el opuesto				$conversion=Alconversiones::model()->convierte($hijos[$i]['codart'],$hijos[$i]['um']);				//echo " la conversion  ".$conversion."  ".gettype($conversion)."      \n";				//echo " material y um  ".$hijos[$i]['codart']."  ".$hijos[$i]['um']."      \n";				//echo " el signo  es ".Almacenmovimientos::model()->findByPk($hijos[$i]['codmov'])->signo."  ".gettype(Almacenmovimientos::model()->findByPk($hijos[$i]['codmov'])->signo)."      \n";				//$signo=Almacenmovimientos::model()->findByPk($movimiento)->signo*-1;  /// Como son costos , es el opuesto				$cantidadmovida=$signo*abs($conversion)*abs($hijos[$i]['cant']);				///////////ok///////////////////////////////////////				////ahora calculando el precio unitario real, para esto actualizamos el Registro de Inventario,				///Esto es indiependiente si el material tiene control de precio S o V						$registroinventario->Actualizar($hijos[$i]['codmov'],$hijos[$i]['cant'],$hijos[$i]['preciounit']);						$modelogastos->monto=$cantidadmovida*($registroinventario->punit+$registroinventario->punitdif); ///									//echo  " la conversion ".$conversion."\n";									//echo  " la cantidad movida ".$cantidadmovida."\n";									 //echo " precio unitario ".$registroinventario->punit."\n";				                  // echo   "El monto    ".$modelogastos->monto."\n";				//echo " la diferencia  ".$registroinventario->punit."  ".gettype($registroinventario->punit)."      \n";				//echo " la diferencia  ".$registroinventario->punitdif."  ".gettype($registroinventario->punitdif)."      \n";				//yii::app()->end();				$modelogastos->idref=$hijos[$i]['id']; //con el kardex lo amarramos						$modelogastos->clasecolector='K'; //CENTRO DE COSTO						$modelogastos->tipo='M'; //materialkes						$modelogastos->codmoneda=Yii::app()->params['monedadef'];						if(!$modelogastos->save()) {								//$transaccion->rollback();								//throw new CHttpException(500,'No se pudo grabar los costos');							MiFactoria::Mensaje('error', 'No se pudieron grabar los costes');							$todook=false;						}										}		  return $todook;							}  /**	 * Updates a particular model.	 * If update is successful, the browser will be redirected to the 'view' page.	 * @param integer $id the ID of the model to be updated	 */	public function actionAnular($id)	{		$model=$this->loadModel($id);		$this->anulavale($model);									}	/**	 * Lists all models.	 */	public function actionIndex()	{		$dataProvider=new CActiveDataProvider('Almacendocs');		$this->render('index',array(			'dataProvider'=>$dataProvider,		));	}	/**	 * Manages all models.	 */	public function actionAdmin()	{		$model=new Almacendocs('search');		$model->unsetAttributes();  // clear any default values		if(isset($_GET['Almacendocs']))			$model->attributes=$_GET['Almacendocs'];		$this->render('admin',array(			'model'=>$model,		));	} 	public function generadetalle($model)							//codigo del documento a tomar como referencia							//numero del doc a tomar como referncia 							//codigo del movimiento	{         //  $model=$this->loadModel($id);		//generar todas las claves del kardex 		//throw new CHttpException(500,'Nque carajo');		           $codigodocumento=$model->codocuref;           $numerodocumento=trim($model->numdocref);           $tipomovimiento=$model->codmovimiento;            switch ($codigodocumento) {   ///Luego hacer los procedimientos segun sea el caso 												 case '210': //orden de compra								//throw new CHttpException(500,'No se encontro el doucmento de compras indicado');									//$this->redirect(array("Aprobarguia",'id'=>$id));						 //rellenar el domcuento de items 						 //VERIFICAR LA ORDEN COMPRA PRIMERO , SOLO LOS ITEMS QUE ESTAN LIBERADOS O ATENDIDOS PARCIALMENTE						 $mocompra=VwOcompra::model()->findall("numcot=:numerox and estadodetalle in ('20','50')  ",array(":numerox"=>$numerodocumento));						 $transaccion=$model->dbConnection->beginTransaction();						 if (count($mocompra) > 0) {						 	for ($i = 0; $i < count($mocompra); ++$i) {						 		                  $modelodetalle=New Alkardex;						 		                  $modelodetalle->codart=$mocompra[$i]['codart'];						 		                  $modelodetalle->codmov=$tipomovimiento;						 		                  $modelodetalle->cant=$mocompra[$i]['cant'];						 		                  $modelodetalle->aldes=$model->codalmacen;						 		                  $modelodetalle->fecha=$model->fechavale;						 		                  $modelodetalle->usuario=Yii::app()->user->name;						 		                  $modelodetalle->um=$mocompra[$i]['um'];						 		                  $modelodetalle->codocuref=$codigodocumento;						 		                   $modelodetalle->numdocref=$numerodocumento;						 		                    $modelodetalle->codcentro=$model->codcentro;						 		                     $modelodetalle->codestado='99';						 		                     $modelodetalle->hidvale=$model->id;						 		                      $modelodetalle->idref=$mocompra[$i]['id']; //el enganche 						 		                     if (!$modelodetalle->save()) {						 		                     	 $transaccion->rollback(); 						 		                     	Yii::app()->end();						 		                     	throw new CHttpException(500,'Se produjo un error al momento de insertar el detalle kardex ');						 		                     	    }						 		                      }						 		        $transaccion->commit();  																 }else {						 		 throw new CHttpException(500,'No se encontro el doucmento de compras indicado');						 }							break;						case '340': // Solicitud de pedido							//$modelosolpe=Solpe::model()->findByPk(75);						 $modelosolpe=Solpe::model()->find(" numero='".trim($model->numdocref)."' ");						//$modelosolpe=Solpe::model()->findall(" numero='0000000043' ");						    if (gettype($modelosolpe)=='object') {						    			///						    	//$modelito=Solpe::model()->findByPk($);			$matrizdetalle=$modelosolpe->solpe_desolpe;				for ($i=0; $i < count($matrizdetalle); $i++) { 								$modelodesolpe=Desolpe::model()->findByPk($matrizdetalle[$i]['id']);								///Si el registro del kardex no ha sido creado aun								$modelokardex=Alkardex::model()->find(" valido='1' AND  idref=".$modelodesolpe->id);								if ($modelokardex===null) {								//creamos el registro Kardex 								$modelokardex= new Alkardex;								//Colocamos los valores 								$modelokardex->codart=trim($modelodesolpe->codart); //el codigo material								$modelokardex->cant=$modelodesolpe->cant; //el codigo material								$modelokardex->codmov= $tipomovimiento; //el codigo MOVIMIENTO								$modelokardex->alemi=$model->codalmacen; //el almacen emisor								$modelokardex->aldes=$model->codalmacen;; //el almacen emisor								$modelokardex->fecha=date("Y-m-d H:i:s"); //contable								$modelokardex->coddoc=$codigodocumento; //el codigo documento que caisa el mov								$modelokardex->numdoc=$numerodocumento; //el numero de doc que causa el mov								$modelokardex->usuario=Yii::app()->user->name;								$modelokardex->um=$modelodesolpe->um; //el codigo material								$modelokardex->codocuref= '101'; //el cod del doc vale almacen								$modelokardex->numdoc=$model->numvale; //el numero vale alamcen 								$modelokardex->codcentro=$model->codcentro; //el codigo documento que caisa el mov								//$modelokardex->codestado='01'; //el estado								$modelokardex->fechadoc=date("Y-m-d H:i:s"); //fecah del documetno								$modelokardex->hidvale=$model->id; //fecah del documetno								$modelokardex->idref=$modelodesolpe->id; //fecah del documetno								//$modelokardex->valido='0';		  					if($modelodesolpe->numeroreservas > 0) { ///solo las que tienen reservas valen 		  									$modelokardex->checki='1'; //es valido		 										 } else {		 										 	$modelokardex->checki='0'; //no es valido		 										 }		 										 $modelokardex->save();									}								 else { /// en el caso de que ya exista el kardex no hacer nada								}									}						    } else {						    	throw new CHttpException(500,gettype($modelosolpe).'No se encontro la solicitud de pedido indicada : '.trim($model->numdocref).'-  -'.strlen(trim($model->numdocref)).'  ' ) ;						    }							//verificando los detalles de la solicitud de pedido							//SOLO LOS ITEMS RESERVADOS CON SUS RESPECTIVAS CANTIDADES							break;												default:								 throw new CHttpException(500,$codigodocumento.'-Se ha tomado un documento que no es valido');	  										 }						}	public function generacontabilidad($model)	{        		 $transaccion=$model->dbConnection->beginTransaction(); 			 	 switch ($model->codocuref) {   ///Luego hacer los procedimientos segun sea el caso 						 case '210':						 	           ///un documento de compras						 				//sacando de una vez el descuento y la conversion  moneda para calcular preciosn 						  				$modelocompra=Ocompra::model()->find("numcot=:numerox  ",array(":numerox"=>trim($model->numdocref)));							  				$descuento=(is_null($modelocompra->descuento))?0:$modelocompra->descuento/100;										$moneda=$modelocompra->moneda;										 if($moneda==Yii::app()->params['monedadef'])										 	    {$conversion=1; }else{										 	    	$conversion=Numeromaximo::cambiomoneda($moneda,Yii::app()->params['monedadef']);										 	      }						   /***********************************************************************						   +		LLENAMOS EL LOG DE ENTREGAS DE LA POSICION DE LA ORDEN DE COMPRA						   ************************************************************************/						 	    $modelokardex=Alkardex::model()->findall("hidvale=".$model->id."  and codestado='99' ");				               if (count($modelokardex) > 0) {						 						for ($i = 0; $i < count($modelokardex); ++$i) {						 		                										   		 	$modeloentregas=New Alentregas;						 		                  													$modeloentregas->iddetcompra=$modelokardex[$i]['idref'];						 		                   													$modeloentregas->cant=$modelokardex[$i]['cant'];						 		                    												$modeloentregas->idkardex=$modelokardex[$i]['id'];						 		                     																if (!$modeloentregas->save()) {						 		                     																								$transaccion->rollback();						 		                     																								throw new CHttpException(500,'Se produjo un error al registrar las entregas');						 		                     																								}						 		                  																			 ///TAMBIEN ACTUALIZAMOS EL STATRUS DE LAS POSCIONES DE LA ORDEN DE COMPRA						 		                     	 															 		                     	 																	 // $modelodetoc=New Docompra;						 		                     	  									 $modelodetoc=Docompra::model()->findByPk($modelokardex[$i]['idref']);						 		                     	  											 if(!is_null($modelodetoc)) {						 		                     	   																//verificando primero cuanto ya se ha atendido antes						 		                     	   																			$criteria=new CDbCriteria;																																	$criteria->select='sum(cant) AS sumatoria';																																	$criteria->addCondition(" iddetcompra= ".$modelokardex[$i]['idref']."   and idkardex <> ".$modelokardex[$i]['id']);																																						$rowsuma = Alentregas::model()->find($criteria);																											    					 $totalatendido =is_null($rowsuma)?0:$rowsuma['sumatoria'];	///esto es lo que se ha atendido																																				if($totalatendido >= $modelodetoc->cant  ) {																																															$transaccion->rollback();																																															throw new CHttpException(500,'Se produjo un error, esta poscionde pedido ya estaba atendida por completo');						 		                     	  																						    																										 } else {																				     																														if( ($modelokardex[$i]['cant']+$totalatendido) >  ($modelodetoc->cant) ) //si tambien con esta atencion se cae en exceso																				     		                																											{																				     		                																													$transaccion->rollback();																				     		                																													throw new CHttpException(500,'Se produjo un error, con este ingreso se sobrepasa la cantidad comprada'.$totalatendido);						 		                     	  																						     		               																												 } else {																				     		                																															if(($modelokardex[$i]['cant']+$totalatendido) < ($modelodetoc->cant)) 																				     		                																																						{																				     		                																																								$modelodetoc->estadodetalle='50' ; //atencion parcial																				     		                																																											} else {																				     		                																																								$modelodetoc->estadodetalle='60' ; //atencion total																				     		                																																						}																				     		                																																			if(!$modelodetoc->save()) {																				     		                																																				$transaccion->rollback();																				     		                																																						throw new CHttpException(500,'No se pudo grabar la actualizacion del detalle del pedido');						 		                     	  																						     		                																																										}																				     		                																											} 																				     		                																							}																				     		                						} 																				     		                																						     		                																				     		                																																							/***************************************************************																											*			ACTUALIZAR EL INVENTARIO TAMBIEN 																											*              Datos a actualizar 																											*				CANTIDAD , PRECIO , PONDERADO PRECIO UNITARIO																											*																															****************************************************************/																													//la cantidad 																																																														$inventario=Alinventario::model()->find(" codalm=:almacencito and codart=:articulito and codcen=:centrito",																																	array(":almacencito"=>$model->codalmacen,":articulito"=>$modelokardex[$i]['codart'], ":centrito"=>$model->codcentro));																																																								    						if(!is_null($inventario)) {																							    									//$inventario->codalm=$model->codalmacen;																							        								//$inventario->codart=$model->codalmacen;																							        								//$inventario->codcentro=$model->codcentro;																							        								//$inventario->codmon=Yii->app()->params['monedadef'];																							        										$inventario->um=$modelokardex[$i]['um'];																							        										$inventario->cantlibre=$inventario->cantlibre+$modelokardex[$i]['cant'];																							        										$inventario->punit=($modelodetoc->punit*(1-$descuento)*$conversion*$modelokardex[$i]['cant']+($inventario->cantlibre+$inventario->cantres)*$inventario->punit)/($inventario->cantlibre+$inventario->cantres+$modelokardex[$i]['cant']);																							        										$inventario->codmon=Yii::app()->params['monedadef'];																							       											 }else {																							        												$inventario=New Alinventario;																							        												$inventario->codalm=$model->codalmacen;																							        												$inventario->codart=$modelokardex[$i]['codart'];																							        												$inventario->codcen=$model->codcentro;																							        												$inventario->codmon=Yii::app()->params['monedadef'];																							        												$inventario->um=$modelokardex[$i]['um'];																							        												$inventario->cantlibre=$modelokardex[$i]['cant'];																							        												$inventario->canttran=0;																							        												$inventario->cantres=0;						 		                    																							       												 }																							       							if(!$inventario->save()) 																							       							{																							       								$transaccion->rollback();																							       								echo "hola". $inventario->codalm."--".$inventario->codart."--".$inventario->codcen."--".$inventario->codmon."--".$inventario->um."--".$inventario->cantlibre;																																throw new CHttpException(500,'NO se pudieron actualizar los datos de inventario '.$inventario->codalm."--".$inventario->codart."--".$inventario->codcen."--".$inventario->codmon."--".$inventario->um."--".$inventario->cantlibre);																																//throw new CHttpException(500,'NO se pudieron actualizar los datos de inventario ');');						 		                    																				     		                																													       							}																							       						/*************************************																							       						*																							       						************************************************************************/																																															       				}																				     		                																																																										     		                																								     		                																										     		                																						                   																				                   																	   																								 		                     	   }else{ //si no enuentra kardex hijos 						 		                     	   	    $transaccion->rollback();																throw new CHttpException(500,'Se produjo un error , no se hallaron kardex hijos');						 		                    } //fin de si encuentra kardex hijos 						 		                   /// debemos tambien de colcoar el status de cambio de estado al KARDEX		 											$command = Yii::app()->db->createCommand(" UPDATE Alkardex set codestado='10' where hidvale=".$model->id);		 															 $modelocompra->codestado='60';																										if ( $command->execute() > 0 and $modelocompra->save() ) {						 		        						$transaccion->commit();  						 		        					} else {						 		        						$transaccion->rollback();															   throw new CHttpException(500,'Hubo un error inesperado al moemento de actualizar el kardex  ');						 		                    						 		        					}							break;						case '340': // Solicitud de pedido							///primero cambiamos el estado de los  kardex 									$command = Yii::app()->db->createCommand(" UPDATE alkardex  set codestado='10' , valido='1' where checki='1' and  hidvale=".$model->id." ");									$command->execute();						  ///luego cambiamos el estado del vale									$model->cestadovale='20';									$model->save();						//actualizamos el estado de las solpe y desolpe																	$transaccion->commit();													 break;						default:								 throw new CHttpException(500,'Se ha tomado un codigo/documento que no es valido');	  										 }	}	/**	 * Returns the data model based on the primary key given in the GET variable.	 * If the data model is not found, an HTTP exception will be raised.	 * @param integer $id the ID of the model to be loaded	 * @return Almacendocs the loaded model	 * @throws CHttpException	 */	public function loadModel($id){		$model=Almacendocs::model()->findByPk($id);		if($model===null)			throw new CHttpException(500,'The requested page does not exist.');		return $model;	}public function  actionpruebax (){throw new CHttpException(500,'ADAFAFes una prueba.');}	/**	 * Performs the AJAX validation.	 * @param Almacendocs $model the model to be validated	 */	protected function performAjaxValidation($model)	{		if(isset($_POST['ajax']) && $_POST['ajax']==='almacendocs-form')		{			echo CActiveForm::validate($model);			Yii::app()->end();		}	}			public function pintadocref($codmov,$model,$form){		echo $this->renderpartial('vw_matchcode',				array(					'model'=>$model,					'form'=>$form,					'nombreclase'=>$this->eligeclase($codmov),					'controlador'=>$this->id,				)		);			}		public function eligeclase($codmov){		switch($codmov) {			case MOV_SALIDA_RESERVA:			return 'Solpe';				break;				case AN_MOV_SALIDA_RESERVA:				case AN_MOV_INGRESO_COMPRA:				case AN_MOV_SALIDA_CECO:				case MOV_INGRESO_CONSIGNACION:				case AN_MOV_INICIAR_TRASLADO:				case MOV_INGRESA_TRASLADO:				case AN_MOV_INGRESA_TRASLADO:				case MOV_REINGRESO_MATERIAL:				case AN_MOV_SALIDA_VENTA:				case AN_MOV_CARGA_INICIAL:			return 'VwAlmacendocs';				break;			case MOV_INGRESO_COMPRA:			case AN_MOV_INGRESO_CONSIGNACION:			case MOV_DEVOLUCION_PROVEEDOR:			return 'VwOcompra';				break;				case MOV_SALIDA_VENTA: case MOV_DEVOLUCION_CLIENTE:			return 'Peticion';				break;				case MOV_SALIDA_CECO:			return 'Cc';				break;                            case COD_MOV_INGRESO_OT:			return 'VwOtdetalle';				break;					}	}	public function transfieredatosalhijo($model,$modelcabeza){		$model->alemi=$modelcabeza->codalmacen;		$model->aldes=$modelcabeza->codaldestino;		$model->codocuref=$modelcabeza->codocuref;		$model->numdocref=$modelcabeza->numdocref;		$model->aldes=$modelcabeza->codaldestino;		$model->codcentro=$modelcabeza->codcentro;		$model->codcendes=$modelcabeza->codcendestino;		$model->hidvale=$modelcabeza->id;	}	public function actionsalir($id){		$this->out($id);		$this->redirect(array('admin'));	}					}